{"version":3,"sources":["assets/black-logo.png","assets/hero-left.png","assets/hero-right.png","Components/Header.js","Components/HeroPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","AppBar_default","style","backgroundColor","color","boxShadow","position","Toolbar_default","className","Grid_default","Avatar_default","alt","height","width","margin","src","require","href","Typography_default","variant","StyledButton","withStyles","root","marginTop","border","label","textTransform","Button","HeroPage","state","modalOpen","openModalHandler","_this","setState","closeModalHandler","Fragment","gutterBottom","onClick","this","bind","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","type","paddingRight","fullWidth","DialogActions_default","Button_default","Component","App","src_Components_Header","src_Components_HeroPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3618e2dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black-logo.4a8f02d6.png\";","module.exports = __webpack_public_path__ + \"static/media/hero-left.03c6428b.png\";","module.exports = __webpack_public_path__ + \"static/media/hero-right.0c61557b.png\";","import React from 'react';\nimport './Header.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst Header = () => {\n    return (\n        <div>\n            <AppBar style={{backgroundColor: 'transparent', color: 'black', boxShadow: 'none'}} position=\"absolute\">\n                <Toolbar className=\"toolbar\">\n                    {/* <div className=\"nav-items left\">\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Features\n                            </Typography>\n                        </a>\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Enterprise\n                            </Typography>\n                        </a>\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Contact\n                            </Typography>\n                        </a>\n                    </div> */}\n                    <Grid>\n                        <Avatar alt=\"Dip Logo\" style={{height: 60+'px', width: 60+'px', margin: 10+'px'}} src={require('../assets/black-logo.png')} />\n                    </Grid>\n                    <div className=\"nav-items right\">\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Players\n                            </Typography>\n                        </a>\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Contact\n                            </Typography>\n                        </a>\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            Pricing\n                            </Typography>\n                        </a>\n                        <a href=\"/\" className=\"nav-item\">\n                            <Typography variant=\"button\" color=\"inherit\">\n                            About\n                            </Typography>\n                        </a>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './HeroPage.css';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nimport { withStyles } from '@material-ui/core/styles';\n\nconst StyledButton = withStyles({\n    root: {\n        marginTop: 1+'em',\n        backgroundColor: '#44C8F5',\n        border: 'none',\n        color: '#FFFFFF',\n    },\n    label: {\n      textTransform: 'capitalize',\n    },\n  })(Button);\n\nclass HeroPage extends Component {\n\n    state = {\n        modalOpen: false\n    }\n\n    openModalHandler = () => {\n        this.setState({\n            modalOpen: true\n        });\n    }\n\n    closeModalHandler = () => {\n        this.setState({\n            modalOpen: false\n        });\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <section className=\"home-container\">\n                    <div className=\"home-content\">\n                        <div className=\"hero-image left\">\n                            <img className=\"logo\" style={{marginTop: 1+'px'}} src={require('../assets/hero-left.png')} alt=\"blk white basketball hoop left\" />\n                        </div>\n                        <div className=\"midd\"></div>\n                        <div className=\"hero-image right\">\n                            <img className=\"logo\" src={require('../assets/hero-right.png')} alt=\"blk white basketball hoop right\" />\n                        </div>\n                        <div className=\"callout\">\n                            <Typography gutterBottom={true} variant=\"h2\">\n                                <span className=\"highlight\">Imagine Better</span>\n                            </Typography>\n                            <Typography gutterBottom={true} variant=\"h2\">\n                                <span className=\"highlight\">Text Here</span>\n                            </Typography>\n                        <div className=\"subtext\">\n                            <Typography variant=\"overline\">\n                            <span className=\"sub\">\n                                Here you should think about what you want your call to action to be. Sign up? Contact? Read More?\n                            </span>\n                            </Typography>\n                        </div>\n                        <div>\n                            <StyledButton onClick={this.openModalHandler.bind(this)} variant=\"contained\">\n                                Call To Action\n                            </StyledButton>\n                        </div>\n                        </div>\n                    </div>\n                </section> \n                <Dialog\n                open={this.state.modalOpen}\n                onClose={this.closeModalHandler}\n                aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">Example Popup</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                        Modals are pop out screens that are usually useed to display important information, or forms for sign ups and logins. You can configure a modal to popup for just about any situation such as a button click or when the user is doing something.\n                        </DialogContentText>\n                        <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"fname\"\n                        label=\"First Name\"\n                        type=\"text\"\n                        style={{paddingRight: 2+'rem' }}\n                        />\n                        <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"lname\"\n                        label=\"Last Name\"\n                        type=\"Text\"\n                        />\n                        <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"email\"\n                        label=\"Email Address\"\n                        type=\"email\"\n                        fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.closeModalHandler} color=\"primary\">\n                        Cancel\n                        </Button>\n                        <Button onClick={this.closeModalHandler} color=\"primary\">\n                        Subscribe\n                        </Button>\n                    </DialogActions>\n                </Dialog>  \n            </React.Fragment>\n        );\n    }\n}\n\nexport default HeroPage;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport HeroPage from './Components/HeroPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <HeroPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}